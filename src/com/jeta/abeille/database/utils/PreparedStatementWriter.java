package com.jeta.abeille.database.utils;

import java.sql.*;
import java.math.*;
import java.io.InputStream;
import java.io.Reader;
import java.io.Writer;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;

/**
 * 
 * @author Jeff Tassin
 */
public class PreparedStatementWriter implements PreparedStatement {

	/** the prepared sql */
	private String m_sql;

	/** a map of parameterIndices (Integer objects) to String values */
	private HashMap m_values = new HashMap();

	/**
	 * ctor
	 */
	public PreparedStatementWriter(String sql) {
		m_sql = sql;
	}

	public void close() {

	}

	/**
	 * @return the sql with the substituted values
	 */
	public String getPreparedSQL() {
		int param = 1;
		StringBuffer result = new StringBuffer();
		for (int index = 0; index < m_sql.length(); index++) {
			char c = m_sql.charAt(index);
			if (c == '?') {
				String value = (String) m_values.get(new Integer(param));
				if (value != null)
					result.append(value);
				param++;
			} else
				result.append(c);
		}
		return result.toString();
	}

	public ResultSet executeQuery() throws SQLException {
		return null;
	}

	public ResultSet executeQuery(String sql) throws SQLException {
		// noop
		return null;
	}

	public int executeUpdate() throws SQLException {
		// noop
		return 0;
	}

	public int executeUpdate(String sql) throws SQLException {
		// noop
		return 0;
	}

	public ParameterMetaData getParameterMetaData() throws SQLException {
		assert (false);
		return null;
	}

	public void clearParameters() throws SQLException {

	}

	public boolean execute() throws SQLException {
		return false;
	}

	public void addBatch() throws SQLException {
	}

	public ResultSetMetaData getMetaData() throws SQLException {
		assert (false);
		return null;
	}

	public int getMaxFieldSize() throws SQLException {
		return 0;
	}

	public int getMaxRows() throws SQLException {
		return 0;
	}

	public int getQueryTimeout() throws SQLException {
		return 0;
	}

	public void cancel() throws SQLException {

	}

	public SQLWarning getWarnings() throws SQLException {
		return null;
	}

	public void clearWarnings() throws SQLException {

	}

	public boolean execute(String sql) throws SQLException {
		return false;
	}

	public ResultSet getResultSet() throws SQLException {
		return null;
	}

	public int getUpdateCount() throws SQLException {
		return 0;
	}

	public boolean getMoreResults() throws SQLException {
		return false;
	}

	public void setCursorName(String name) throws SQLException {

	}

	public void setFetchDirection(int direction) throws SQLException {

	}

	public int getFetchDirection() throws SQLException {
		return 0;
	}

	public void setFetchSize(int rows) throws SQLException {

	}

	public int getFetchSize() throws SQLException {
		return 0;
	}

	public int getResultSetConcurrency() throws SQLException {
		return 0;
	}

	public int getResultSetType() throws SQLException {
		return 0;
	}

	public void addBatch(String sql) throws SQLException {

	}

	public void clearBatch() throws SQLException {

	}

	public int[] executeBatch() throws SQLException {
		return null;
	}

	public Connection getConnection() throws SQLException {
		return null;
	}

	public boolean getMoreResults(int current) throws SQLException {
		return false;
	}

	public ResultSet getGeneratedKeys() throws SQLException {
		return null;
	}

	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		return 0;
	}

	public int executeUpdate(String sql, int columnIndexes[]) throws SQLException {
		return 0;
	}

	public int executeUpdate(String sql, String columnNames[]) throws SQLException {
		return 0;
	}

	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		return false;
	}

	public boolean execute(String sql, int columnIndexes[]) throws SQLException {
		return false;
	}

	public boolean execute(String sql, String columnNames[]) throws SQLException {
		return false;
	}

	public int getResultSetHoldability() throws SQLException {
		return 0;
	}

	public void setNull(int parameterIndex, int sqlType) throws SQLException {
		setValue(parameterIndex, "NULL");
	}

	public void setBoolean(int parameterIndex, boolean x) throws SQLException {
		setValue(parameterIndex, String.valueOf(x));
	}

	public void setByte(int parameterIndex, byte x) throws SQLException {
		setValue(parameterIndex, String.valueOf(x));
	}

	public void setShort(int parameterIndex, short x) throws SQLException {
		setValue(parameterIndex, String.valueOf(x));
	}

	public void setInt(int parameterIndex, int x) throws SQLException {
		setValue(parameterIndex, String.valueOf(x));
	}

	public void setLong(int parameterIndex, long x) throws SQLException {
		setValue(parameterIndex, String.valueOf(x));
	}

	public void setFloat(int parameterIndex, float x) throws SQLException {
		setValue(parameterIndex, String.valueOf(x));
	}

	public void setDouble(int parameterIndex, double x) throws SQLException {
		setValue(parameterIndex, String.valueOf(x));
	}

	public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {
		if (x == null)
			setNull(parameterIndex, 0);
		else
			setValue(parameterIndex, String.valueOf(x));
	}

	public void setBytes(int parameterIndex, byte x[]) throws SQLException {
		if (x == null)
			setNull(parameterIndex, 0);
		else {
			StringBuffer result = new StringBuffer();
			result.append("byte[");
			result.append(x.length);
			result.append("]@");
			result.append(x.hashCode());
			setValue(parameterIndex, result.toString());
		}
	}

	public void setDate(int parameterIndex, java.sql.Date x) throws SQLException {
		if (x == null)
			setNull(parameterIndex, 0);
		else {
			setValue(parameterIndex, x.toString());
		}
	}

	public void setTime(int parameterIndex, java.sql.Time x) throws SQLException {
		if (x == null)
			setNull(parameterIndex, 0);
		else {
			setValue(parameterIndex, x.toString());
		}
	}

	public void setTimestamp(int parameterIndex, java.sql.Timestamp x) throws SQLException {
		if (x == null)
			setNull(parameterIndex, 0);
		else {
			setValue(parameterIndex, x.toString());
		}

	}

	public void setAsciiStream(int parameterIndex, java.io.InputStream x, int length) throws SQLException {

	}

	public void setUnicodeStream(int parameterIndex, java.io.InputStream x, int length) throws SQLException {

	}

	public void setBinaryStream(int parameterIndex, java.io.InputStream x, int length) throws SQLException {
		if (x == null)
			setNull(parameterIndex, 0);
		else {
			StringBuffer result = new StringBuffer();
			result.append(x.getClass());
			result.append("[");
			result.append(length);
			result.append("]@");
			result.append(x.hashCode());
			setValue(parameterIndex, result.toString());
		}
	}

	public void setCharacterStream(int parameterIndex, java.io.Reader reader, int length) throws SQLException {
		if (reader == null)
			setNull(parameterIndex, 0);
		else {
			StringBuffer result = new StringBuffer();
			result.append("reader[");
			result.append(length);
			result.append("]@");
			result.append(reader.hashCode());
			setValue(parameterIndex, reader.toString());
		}
	}

	public void setRef(int i, Ref x) throws SQLException {

	}

	public void setBlob(int i, Blob x) throws SQLException {

	}

	public void setClob(int i, Clob x) throws SQLException {

	}

	public void setArray(int i, Array x) throws SQLException {

	}

	public void setObject(int parameterIndex, Object x, int targetSqlType, int scale) throws SQLException {
		setObject(parameterIndex, x);
	}

	public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException {
		setObject(parameterIndex, x);

	}

	public void setObject(int parameterIndex, Object x) throws SQLException {
		if (x == null)
			setNull(parameterIndex, 0);
		else {
			// StringBuffer result = new StringBuffer();
			// result.append( x.getClass().getName() );
			// result.append( "@" );
			// result.append( x.hashCode() );
			// setValue( parameterIndex, result.toString() );
			setValue(parameterIndex, x.toString());
		}
	}

	public void setString(int parameterIndex, String x) throws SQLException {
		if (x == null)
			setNull(parameterIndex, 0);
		else {
			setValue(parameterIndex, x);
		}
	}

	public void setDate(int parameterIndex, java.sql.Date x, Calendar cal) throws SQLException {

	}

	public void setTime(int parameterIndex, java.sql.Time x, Calendar cal) throws SQLException {

	}

	public void setTimestamp(int parameterIndex, java.sql.Timestamp x, Calendar cal) throws SQLException {

	}

	public void setNull(int parameterIndex, int sqlType, String typeName) throws SQLException {
		setNull(parameterIndex, 0);
	}

	public void setURL(int parameterIndex, java.net.URL x) throws SQLException {

	}

	public void setMaxFieldSize(int max) throws SQLException {

	}

	public void setEscapeProcessing(boolean enable) throws SQLException {

	}

	public void setMaxRows(int max) throws SQLException {

	}

	public void setQueryTimeout(int seconds) throws SQLException {

	}

	public void setValue(int parameterIndex, String value) {
		m_values.put(new Integer(parameterIndex), value);
	}

	@Override
	public boolean isClosed() throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void setPoolable(boolean poolable) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public boolean isPoolable() throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void closeOnCompletion() throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public boolean isCloseOnCompletion() throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void setRowId(int parameterIndex, RowId x) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void setNString(int parameterIndex, String value) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void setNClob(int parameterIndex, NClob value) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void setClob(int parameterIndex, Reader reader, long length) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void setNClob(int parameterIndex, Reader reader, long length) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void setNCharacterStream(int parameterIndex, Reader value) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void setClob(int parameterIndex, Reader reader) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public void setNClob(int parameterIndex, Reader reader) throws SQLException {
		// TODO Auto-generated method stub

	}
}
