package com.jeta.abeille.gui.formbuilder;

import java.awt.Dimension;

import java.io.IOException;

import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;

import com.jeta.abeille.database.model.Catalog;
import com.jeta.abeille.database.model.DatabaseObject;
import com.jeta.abeille.database.model.DbObjectId;
import com.jeta.abeille.database.model.DbObjectType;
import com.jeta.abeille.database.model.Schema;
import com.jeta.abeille.database.model.TSConnection;

import com.jeta.abeille.gui.model.ModelViewModelEvent;
import com.jeta.abeille.gui.model.ModelViewModelListener;
import com.jeta.abeille.gui.model.common.DatabaseObjectProxy;

import com.jeta.foundation.common.JETAExternalizable;

import com.jeta.foundation.gui.components.TSWorkspaceFrame;
import com.jeta.foundation.gui.components.JETAFrameAdapter;
import com.jeta.foundation.gui.components.JETAFrameEvent;
import com.jeta.foundation.interfaces.app.ObjectStore;
import com.jeta.foundation.utils.TSUtils;

/**
 * 
 * @author Jeff Tassin
 */
public class FormProxy implements JETAExternalizable, DatabaseObject, ModelViewModelListener, DatabaseObjectProxy {
	static final long serialVersionUID = 3145744568648378582L;

	public static int VERSION = 1;

	/**
	 * This is a unique tag for the query that is automatically generated by
	 * this class
	 */
	private String m_uid;

	/**
	 * This is the schema.name of the form as assigned by the user
	 */
	private DbObjectId m_id;

	/**
	 * The database connection
	 */
	private TSConnection m_connection;

	/**
	 * The frame window that is currently editing the query
	 */
	private transient FormBuilderFrame m_frame;

	/**
	 * The underlying form model
	 */
	private transient FormModel m_model;

	private transient FormTreeModel m_formtreemodel;

	/**
	 * Default ctor for serialization only
	 */
	public FormProxy() {

	}

	/**
	 * Creates a new query proxy. Call this when creating a new query instance
	 * in the query builder
	 */
	public static FormProxy createInstance(Catalog catalog, Schema schema, TSConnection connection, String name) {
		FormProxy proxy = new FormProxy();
		proxy.m_uid = TSUtils.createUID();
		proxy.m_id = new DbObjectId(DbObjectType.JETA_FORM, catalog, schema, name);
		proxy.m_connection = connection;
		proxy.createFrame();
		return proxy;
	}

	/**
    *
    */
	public FormBuilderFrame createFrame() {
		assert (m_frame == null);

		TSWorkspaceFrame wsframe = TSWorkspaceFrame.getInstance();
		m_frame = (FormBuilderFrame) wsframe.createInternalFrame(
				com.jeta.abeille.gui.formbuilder.FormBuilderFrame.class, false, m_connection.getId());
		Object[] params = new Object[2];
		params[0] = m_connection;
		params[1] = getModel();
		m_frame.initializeModel(params);
		// add the new frame to the workspace
		wsframe.setRelative(m_frame, 0.8f, 0.8f, new Dimension(400, 300));
		wsframe.addWindow(m_frame);

		// add an internal frame listener so we can be notified when the window
		// is closed
		m_frame.addFrameListener(new JETAFrameAdapter() {
			public void jetaFrameClosing(JETAFrameEvent we) {
				m_frame = null;
				if (m_model != null)
					m_model.removeListener(FormProxy.this);
				m_model = null;
			}

			public void jetaFrameClosed(JETAFrameEvent we) {
				m_frame = null;
				if (m_model != null)
					m_model.removeListener(FormProxy.this);
				m_model = null;
			}

		});

		return m_frame;
	}

	/**
	 * Deletes the form from disk and closes the frame window
	 */
	public void deleteForm() throws IOException {
		if (m_frame != null)
			m_frame.dispose();

		m_frame = null;
		// System.out.println( "deleting form: " + FormModel.getStoreKey( m_uid
		// ) );
		ObjectStore os = m_connection.getObjectStore();
		os.delete(FormModel.getStoreKey(m_uid));
	}

	/**
	 * ModelViewModelListener implementation. Used when the model name changes.
	 */
	public void eventFired(ModelViewModelEvent evt) {
		if (evt.getID() == FormModel.MODEL_NAME_CHANGED) {
			m_id = m_id.changeName((String) evt.getParameter(0));
			if (m_formtreemodel != null) {
				m_formtreemodel.notifyFormChanged(this);
			}
		}
	}

	/**
	 * @return the catalog that owns the object associated with this proxy
	 */
	public Catalog getCatalog() {
		return m_id.getCatalog();
	}

	/**
	 * @return the schema that owns the object associated with this proxy
	 */
	public Schema getSchema() {
		return m_id.getSchema();
	}

	/**
	 * @return the frame window that is responsible for displaying the query
	 * 
	 */
	public FormBuilderFrame getFrame() {
		return m_frame;
	}

	/**
	 * @return the underlying form model. If the model has not been loaded yet,
	 *         it will be loaded from the object store, or it will be created if
	 *         the model is new.
	 */
	public Object getModel() {
		if (m_model == null) {
			// if the model cannot find the uid, then it assumes the form is new
			m_model = FormModel.loadInstance(m_connection, m_uid, m_id);
			m_model.addListener(this);
		}

		return m_model;
	}

	/**
	 * @return the name of the query
	 */
	public String getName() {
		return m_id.getObjectName();
	}

	/**
	 * DatabaseObject implementation
	 * 
	 * @return the object id/type for this object
	 */
	public DbObjectId getObjectId() {
		return m_id;
	}

	void setFormTreeModel(FormTreeModel model) {
		m_formtreemodel = model;
	}

	/**
	 * Sets the catalog and schema for this proxy
	 */
	public void set(Catalog catalog, Schema schema) {
		m_id = m_id.change(catalog, schema);
		((FormModel) getModel()).set(catalog, schema);
	}

	/**
	 * Sets the name for the form. The model is also updated
	 */
	public void setName(String name) {
		((FormModel) getModel()).setName(name);
	}

	/**
	 * Externalizable Implementation
	 */
	public void readExternal(java.io.ObjectInput in) throws ClassNotFoundException, IOException {
		int version = in.readInt();
		m_uid = (String) in.readObject();
		m_id = (DbObjectId) in.readObject();
		m_connection = (TSConnection) in.readObject();
	}

	/**
	 * Externalizable Implementation
	 */
	public void writeExternal(java.io.ObjectOutput out) throws IOException {
		out.writeInt(VERSION);
		out.writeObject(m_uid);
		out.writeObject(m_id);
		out.writeObject(m_connection);
	}

}
