/* Generated By:JavaCC: Do not edit this line. ConstraintParser.java */
package com.jeta.abeille.query.constraintparser;

import java.util.ArrayList;
import java.util.Iterator;

import com.jeta.abeille.query.*;
import com.jeta.abeille.database.model.Catalog;
import com.jeta.abeille.database.model.Schema;
import com.jeta.abeille.database.model.TableId;
import com.jeta.abeille.database.model.TSConnection;

public class ConstraintParser implements ConstraintParserConstants {
	/** the catalog to use if one is not provided. */
	private Catalog m_defaultcatalog;

	/** the schema to use if one is not provided */
	private Schema m_defaultschema;

	/** the database connection manager */
	private TSConnection m_connection;

	public static void main(String args[]) throws ParseException {
		ConstraintParser parser = new ConstraintParser(System.in);
		while (true) {
			parser.parse();
		}
	}

	public void initialize(TSConnection conn, Catalog defaultCatalog, Schema defaultSchema) {
		m_connection = conn;
		m_defaultcatalog = defaultCatalog;
		m_defaultschema = defaultSchema;
	}

	/**
	 * Invoke parse to start the parse operation
	 */
	final public ConstraintNode parse() throws ParseException {
		ConstraintNode result = null;
		result = node();
		if (jj_2_1(2)) {
			jj_consume_token(EOL);
		} else if (jj_2_2(2)) {
			jj_consume_token(0);
		} else {
			jj_consume_token(-1);
			throw new ParseException();
		}
		{
			if (true)
				return result;
		}
		throw new Error("Missing return statement in function");
	}

	final public ConstraintNode node() throws ParseException {
		Token x;
		ConstraintNode node = new ConstraintNode();
		Object result;
		result = expr(new ArrayList());
		node.addNode(null, result);
		label_1: while (true) {
			if (jj_2_3(2)) {
				;
			} else {
				break label_1;
			}
			if (jj_2_4(2)) {
				jj_consume_token(AND);
				result = expr(new ArrayList());
				node.addNode(LogicalConnective.AND, result);
			} else if (jj_2_5(2)) {
				jj_consume_token(OR);
				result = expr(new ArrayList());
				node.addNode(LogicalConnective.OR, result);
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
		}
		{
			if (true)
				return node;
		}
		throw new Error("Missing return statement in function");
	}

	final public Object subexpr(Expression expression) throws ParseException {
		Object result;
		if (jj_2_6(2)) {
			operands(expression);
			{
				if (true)
					return expression;
			}
		} else if (jj_2_7(2)) {
			jj_consume_token(OPENPAREN);
			result = node();
			jj_consume_token(CLOSEPAREN);
			{
				if (true)
					return result;
			}
		} else {
			jj_consume_token(-1);
			throw new ParseException();
		}
		throw new Error("Missing return statement in function");
	}

	final public Object expr(ArrayList literals) throws ParseException {
		Token x;
		String schemaname;
		String tablename;
		String columnname;
		Object result;
		Expression expression = new Expression();
		TableId tableid;
		x = jj_consume_token(ID);
		literals.add(x.image);
		if (jj_2_8(2)) {
			x = jj_consume_token(DOT);
			result = expr(literals);
			{
				if (true)
					return result;
			}
		} else if (jj_2_9(2)) {
			result = subexpr(expression);
			if (literals.size() == 2) {
				// user specified table.column with default catalog and schema
				tableid = new TableId(m_defaultcatalog, m_defaultschema, (String) literals.get(0));
				expression.setTableId(tableid);
				expression.setColumnName((String) literals.get(1));
			} else if (literals.size() == 3) {
				// user specified (catalog|schema).table.column depending on if
				// the connection supports multiple catalogs/schemas
				if (m_connection.supportsSchemas()) {
					tableid = new TableId(m_defaultcatalog, new Schema((String) literals.get(0)),
							(String) literals.get(1));
					expression.setTableId(tableid);
					expression.setColumnName((String) literals.get(2));
				} else if (m_connection.supportsCatalogs()) {
					tableid = new TableId(Catalog.createInstance((String) literals.get(0)), m_defaultschema,
							(String) literals.get(1));
					expression.setTableId(tableid);
					expression.setColumnName((String) literals.get(2));
				} else {
					// unknown
					tableid = new TableId(m_defaultcatalog, m_defaultschema, (String) literals.get(1));
					expression.setTableId(tableid);
					expression.setColumnName((String) literals.get(2));
				}
			} else if (literals.size() == 4) {
				// user specified catalog.schema.table.column
				if (m_connection.supportsCatalogs() && m_connection.supportsSchemas()) {
					tableid = new TableId(Catalog.createInstance((String) literals.get(0)), new Schema(
							(String) literals.get(1)), (String) literals.get(2));
					expression.setTableId(tableid);
					expression.setColumnName((String) literals.get(3));
				}
			}
			// otherwise it is undefined
			{
				if (true)
					return result;
			}
		} else {
			jj_consume_token(-1);
			throw new ParseException();
		}
		throw new Error("Missing return statement in function");
	}

	final public void operands(Expression expression) throws ParseException {
		String rs;
		rs = SQLCompareOp();
		Operator op = Operator.fromString(rs);
		expression.setOperator(op);
		rs = SQLValue();
		expression.setValue(rs);
	}

	final public String SQLCompareOp() throws ParseException {
		String rs = new String("");
		if (jj_2_10(2)) {
			jj_consume_token(EQUAL);
			rs = "=";
		} else if (jj_2_11(2)) {
			jj_consume_token(NOTEQUAL);
			rs = "!=";
		} else if (jj_2_12(2)) {
			jj_consume_token(NOTEQUAL2);
			rs = "!=";
		} else if (jj_2_13(2)) {
			jj_consume_token(GREATER);
			rs = ">";
		} else if (jj_2_14(2)) {
			jj_consume_token(GREATEREQUAL);
			rs = ">=";
		} else if (jj_2_15(2)) {
			jj_consume_token(LESS);
			rs = "<";
		} else if (jj_2_16(2)) {
			jj_consume_token(LESSEQUAL);
			rs = "<=";
		} else if (jj_2_17(2)) {
			jj_consume_token(LIKE);
			rs = "LIKE";
		} else if (jj_2_18(2)) {
			jj_consume_token(IS_NULL);
			rs = "IS NULL";
		} else {
			jj_consume_token(-1);
			throw new ParseException();
		}
		{
			if (true)
				return rs;
		}
		throw new Error("Missing return statement in function");
	}

	final public String SQLValue() throws ParseException {
		Token x;
		String rs = new String("");
		if (jj_2_19(2)) {
			x = jj_consume_token(INTEGER_LITERAL);
			{
				if (true)
					return x.image;
			}
		} else if (jj_2_20(2)) {
			x = jj_consume_token(STRING_LITERAL);
			{
				if (true)
					return x.image;
			}
		} else if (jj_2_21(2)) {
			x = jj_consume_token(QUESTIONMARK);
			{
				if (true)
					return x.image;
			}
		} else if (jj_2_22(2)) {
			x = jj_consume_token(AT);
			{
				if (true)
					return x.image;
			}
		} else if (jj_2_23(2)) {
			x = jj_consume_token(BOOLEAN);
			{
				if (true)
					return x.image;
			}
		} else if (jj_2_24(2)) {
			x = jj_consume_token(0);
			{
				if (true)
					return "";
			}
		} else {
			jj_consume_token(-1);
			throw new ParseException();
		}
		throw new Error("Missing return statement in function");
	}

	final private boolean jj_2_1(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		boolean retval = !jj_3_1();
		jj_save(0, xla);
		return retval;
	}

	final private boolean jj_2_2(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		boolean retval = !jj_3_2();
		jj_save(1, xla);
		return retval;
	}

	final private boolean jj_2_3(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		boolean retval = !jj_3_3();
		jj_save(2, xla);
		return retval;
	}

	final private boolean jj_2_4(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		boolean retval = !jj_3_4();
		jj_save(3, xla);
		return retval;
	}

	final private boolean jj_2_5(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		boolean retval = !jj_3_5();
		jj_save(4, xla);
		return retval;
	}

	final private boolean jj_2_6(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		boolean retval = !jj_3_6();
		jj_save(5, xla);
		return retval;
	}

	final private boolean jj_2_7(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		boolean retval = !jj_3_7();
		jj_save(6, xla);
		return retval;
	}

	final private boolean jj_2_8(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		boolean retval = !jj_3_8();
		jj_save(7, xla);
		return retval;
	}

	final private boolean jj_2_9(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		boolean retval = !jj_3_9();
		jj_save(8, xla);
		return retval;
	}

	final private boolean jj_2_10(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		boolean retval = !jj_3_10();
		jj_save(9, xla);
		return retval;
	}

	final private boolean jj_2_11(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		boolean retval = !jj_3_11();
		jj_save(10, xla);
		return retval;
	}

	final private boolean jj_2_12(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		boolean retval = !jj_3_12();
		jj_save(11, xla);
		return retval;
	}

	final private boolean jj_2_13(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		boolean retval = !jj_3_13();
		jj_save(12, xla);
		return retval;
	}

	final private boolean jj_2_14(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		boolean retval = !jj_3_14();
		jj_save(13, xla);
		return retval;
	}

	final private boolean jj_2_15(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		boolean retval = !jj_3_15();
		jj_save(14, xla);
		return retval;
	}

	final private boolean jj_2_16(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		boolean retval = !jj_3_16();
		jj_save(15, xla);
		return retval;
	}

	final private boolean jj_2_17(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		boolean retval = !jj_3_17();
		jj_save(16, xla);
		return retval;
	}

	final private boolean jj_2_18(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		boolean retval = !jj_3_18();
		jj_save(17, xla);
		return retval;
	}

	final private boolean jj_2_19(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		boolean retval = !jj_3_19();
		jj_save(18, xla);
		return retval;
	}

	final private boolean jj_2_20(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		boolean retval = !jj_3_20();
		jj_save(19, xla);
		return retval;
	}

	final private boolean jj_2_21(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		boolean retval = !jj_3_21();
		jj_save(20, xla);
		return retval;
	}

	final private boolean jj_2_22(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		boolean retval = !jj_3_22();
		jj_save(21, xla);
		return retval;
	}

	final private boolean jj_2_23(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		boolean retval = !jj_3_23();
		jj_save(22, xla);
		return retval;
	}

	final private boolean jj_2_24(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		boolean retval = !jj_3_24();
		jj_save(23, xla);
		return retval;
	}

	final private boolean jj_3_4() {
		if (jj_scan_token(AND))
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		if (jj_3R_2())
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		return false;
	}

	final private boolean jj_3_3() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_4()) {
			jj_scanpos = xsp;
			if (jj_3_5())
				return true;
			if (jj_la == 0 && jj_scanpos == jj_lastpos)
				return false;
		} else if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		return false;
	}

	final private boolean jj_3_11() {
		if (jj_scan_token(NOTEQUAL))
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		return false;
	}

	final private boolean jj_3_10() {
		if (jj_scan_token(EQUAL))
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		return false;
	}

	final private boolean jj_3R_4() {
		if (jj_3R_2())
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		return false;
	}

	final private boolean jj_3R_6() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_10()) {
			jj_scanpos = xsp;
			if (jj_3_11()) {
				jj_scanpos = xsp;
				if (jj_3_12()) {
					jj_scanpos = xsp;
					if (jj_3_13()) {
						jj_scanpos = xsp;
						if (jj_3_14()) {
							jj_scanpos = xsp;
							if (jj_3_15()) {
								jj_scanpos = xsp;
								if (jj_3_16()) {
									jj_scanpos = xsp;
									if (jj_3_17()) {
										jj_scanpos = xsp;
										if (jj_3_18())
											return true;
										if (jj_la == 0 && jj_scanpos == jj_lastpos)
											return false;
									} else if (jj_la == 0 && jj_scanpos == jj_lastpos)
										return false;
								} else if (jj_la == 0 && jj_scanpos == jj_lastpos)
									return false;
							} else if (jj_la == 0 && jj_scanpos == jj_lastpos)
								return false;
						} else if (jj_la == 0 && jj_scanpos == jj_lastpos)
							return false;
					} else if (jj_la == 0 && jj_scanpos == jj_lastpos)
						return false;
				} else if (jj_la == 0 && jj_scanpos == jj_lastpos)
					return false;
			} else if (jj_la == 0 && jj_scanpos == jj_lastpos)
				return false;
		} else if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		return false;
	}

	final private boolean jj_3R_3() {
		if (jj_3R_6())
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		if (jj_3R_7())
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		return false;
	}

	final private boolean jj_3_9() {
		if (jj_3R_5())
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		return false;
	}

	final private boolean jj_3_8() {
		if (jj_scan_token(DOT))
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		if (jj_3R_2())
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		return false;
	}

	final private boolean jj_3R_2() {
		if (jj_scan_token(ID))
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		return false;
	}

	final private boolean jj_3_24() {
		if (jj_scan_token(0))
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		return false;
	}

	final private boolean jj_3_23() {
		if (jj_scan_token(BOOLEAN))
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		return false;
	}

	final private boolean jj_3_22() {
		if (jj_scan_token(AT))
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		return false;
	}

	final private boolean jj_3_21() {
		if (jj_scan_token(QUESTIONMARK))
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		return false;
	}

	final private boolean jj_3_20() {
		if (jj_scan_token(STRING_LITERAL))
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		return false;
	}

	final private boolean jj_3_2() {
		if (jj_scan_token(0))
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		return false;
	}

	final private boolean jj_3R_7() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_19()) {
			jj_scanpos = xsp;
			if (jj_3_20()) {
				jj_scanpos = xsp;
				if (jj_3_21()) {
					jj_scanpos = xsp;
					if (jj_3_22()) {
						jj_scanpos = xsp;
						if (jj_3_23()) {
							jj_scanpos = xsp;
							if (jj_3_24())
								return true;
							if (jj_la == 0 && jj_scanpos == jj_lastpos)
								return false;
						} else if (jj_la == 0 && jj_scanpos == jj_lastpos)
							return false;
					} else if (jj_la == 0 && jj_scanpos == jj_lastpos)
						return false;
				} else if (jj_la == 0 && jj_scanpos == jj_lastpos)
					return false;
			} else if (jj_la == 0 && jj_scanpos == jj_lastpos)
				return false;
		} else if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		return false;
	}

	final private boolean jj_3_19() {
		if (jj_scan_token(INTEGER_LITERAL))
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		return false;
	}

	final private boolean jj_3_7() {
		if (jj_scan_token(OPENPAREN))
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		if (jj_3R_4())
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		return false;
	}

	final private boolean jj_3R_5() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_6()) {
			jj_scanpos = xsp;
			if (jj_3_7())
				return true;
			if (jj_la == 0 && jj_scanpos == jj_lastpos)
				return false;
		} else if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		return false;
	}

	final private boolean jj_3_6() {
		if (jj_3R_3())
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		return false;
	}

	final private boolean jj_3_1() {
		if (jj_scan_token(EOL))
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		return false;
	}

	final private boolean jj_3_18() {
		if (jj_scan_token(IS_NULL))
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		return false;
	}

	final private boolean jj_3_17() {
		if (jj_scan_token(LIKE))
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		return false;
	}

	final private boolean jj_3_16() {
		if (jj_scan_token(LESSEQUAL))
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		return false;
	}

	final private boolean jj_3_15() {
		if (jj_scan_token(LESS))
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		return false;
	}

	final private boolean jj_3_14() {
		if (jj_scan_token(GREATEREQUAL))
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		return false;
	}

	final private boolean jj_3_13() {
		if (jj_scan_token(GREATER))
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		return false;
	}

	final private boolean jj_3_5() {
		if (jj_scan_token(OR))
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		if (jj_3R_2())
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		return false;
	}

	final private boolean jj_3_12() {
		if (jj_scan_token(NOTEQUAL2))
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		return false;
	}

	public ConstraintParserTokenManager token_source;
	SimpleCharStream jj_input_stream;
	public Token token, jj_nt;
	private int jj_ntk;
	private Token jj_scanpos, jj_lastpos;
	private int jj_la;
	public boolean lookingAhead = false;
	private boolean jj_semLA;
	private int jj_gen;
	final private int[] jj_la1 = new int[0];
	final private int[] jj_la1_0 = {};
	final private JJCalls[] jj_2_rtns = new JJCalls[24];
	private boolean jj_rescan = false;
	private int jj_gc = 0;

	public ConstraintParser(java.io.InputStream stream) {
		jj_input_stream = new SimpleCharStream(stream, 1, 1);
		token_source = new ConstraintParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 0; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	public void ReInit(java.io.InputStream stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 0; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	public ConstraintParser(java.io.Reader stream) {
		jj_input_stream = new SimpleCharStream(stream, 1, 1);
		token_source = new ConstraintParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 0; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	public void ReInit(java.io.Reader stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 0; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	public ConstraintParser(ConstraintParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 0; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	public void ReInit(ConstraintParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 0; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	final private Token jj_consume_token(int kind) throws ParseException {
		Token oldToken;
		if ((oldToken = token).next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		if (token.kind == kind) {
			jj_gen++;
			if (++jj_gc > 100) {
				jj_gc = 0;
				for (int i = 0; i < jj_2_rtns.length; i++) {
					JJCalls c = jj_2_rtns[i];
					while (c != null) {
						if (c.gen < jj_gen)
							c.first = null;
						c = c.next;
					}
				}
			}
			return token;
		}
		token = oldToken;
		jj_kind = kind;
		throw generateParseException();
	}

	final private boolean jj_scan_token(int kind) {
		if (jj_scanpos == jj_lastpos) {
			jj_la--;
			if (jj_scanpos.next == null) {
				jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
			} else {
				jj_lastpos = jj_scanpos = jj_scanpos.next;
			}
		} else {
			jj_scanpos = jj_scanpos.next;
		}
		if (jj_rescan) {
			int i = 0;
			Token tok = token;
			while (tok != null && tok != jj_scanpos) {
				i++;
				tok = tok.next;
			}
			if (tok != null)
				jj_add_error_token(kind, i);
		}
		return (jj_scanpos.kind != kind);
	}

	final public Token getNextToken() {
		if (token.next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		jj_gen++;
		return token;
	}

	final public Token getToken(int index) {
		Token t = lookingAhead ? jj_scanpos : token;
		for (int i = 0; i < index; i++) {
			if (t.next != null)
				t = t.next;
			else
				t = t.next = token_source.getNextToken();
		}
		return t;
	}

	final private int jj_ntk() {
		if ((jj_nt = token.next) == null)
			return (jj_ntk = (token.next = token_source.getNextToken()).kind);
		else
			return (jj_ntk = jj_nt.kind);
	}

	private java.util.Vector jj_expentries = new java.util.Vector();
	private int[] jj_expentry;
	private int jj_kind = -1;
	private int[] jj_lasttokens = new int[100];
	private int jj_endpos;

	private void jj_add_error_token(int kind, int pos) {
		if (pos >= 100)
			return;
		if (pos == jj_endpos + 1) {
			jj_lasttokens[jj_endpos++] = kind;
		} else if (jj_endpos != 0) {
			jj_expentry = new int[jj_endpos];
			for (int i = 0; i < jj_endpos; i++) {
				jj_expentry[i] = jj_lasttokens[i];
			}
			boolean exists = false;
			for (java.util.Enumeration enum1 = jj_expentries.elements(); enum1.hasMoreElements();) {
				int[] oldentry = (int[]) (enum1.nextElement());
				if (oldentry.length == jj_expentry.length) {
					exists = true;
					for (int i = 0; i < jj_expentry.length; i++) {
						if (oldentry[i] != jj_expentry[i]) {
							exists = false;
							break;
						}
					}
					if (exists)
						break;
				}
			}
			if (!exists)
				jj_expentries.addElement(jj_expentry);
			if (pos != 0)
				jj_lasttokens[(jj_endpos = pos) - 1] = kind;
		}
	}

	final public ParseException generateParseException() {
		jj_expentries.removeAllElements();
		boolean[] la1tokens = new boolean[29];
		for (int i = 0; i < 29; i++) {
			la1tokens[i] = false;
		}
		if (jj_kind >= 0) {
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}
		for (int i = 0; i < 0; i++) {
			if (jj_la1[i] == jj_gen) {
				for (int j = 0; j < 32; j++) {
					if ((jj_la1_0[i] & (1 << j)) != 0) {
						la1tokens[j] = true;
					}
				}
			}
		}
		for (int i = 0; i < 29; i++) {
			if (la1tokens[i]) {
				jj_expentry = new int[1];
				jj_expentry[0] = i;
				jj_expentries.addElement(jj_expentry);
			}
		}
		jj_endpos = 0;
		jj_rescan_token();
		jj_add_error_token(0, 0);
		int[][] exptokseq = new int[jj_expentries.size()][];
		for (int i = 0; i < jj_expentries.size(); i++) {
			exptokseq[i] = (int[]) jj_expentries.elementAt(i);
		}
		return new ParseException(token, exptokseq, tokenImage);
	}

	final public void enable_tracing() {
	}

	final public void disable_tracing() {
	}

	final private void jj_rescan_token() {
		jj_rescan = true;
		for (int i = 0; i < 24; i++) {
			JJCalls p = jj_2_rtns[i];
			do {
				if (p.gen > jj_gen) {
					jj_la = p.arg;
					jj_lastpos = jj_scanpos = p.first;
					switch (i) {
					case 0:
						jj_3_1();
						break;
					case 1:
						jj_3_2();
						break;
					case 2:
						jj_3_3();
						break;
					case 3:
						jj_3_4();
						break;
					case 4:
						jj_3_5();
						break;
					case 5:
						jj_3_6();
						break;
					case 6:
						jj_3_7();
						break;
					case 7:
						jj_3_8();
						break;
					case 8:
						jj_3_9();
						break;
					case 9:
						jj_3_10();
						break;
					case 10:
						jj_3_11();
						break;
					case 11:
						jj_3_12();
						break;
					case 12:
						jj_3_13();
						break;
					case 13:
						jj_3_14();
						break;
					case 14:
						jj_3_15();
						break;
					case 15:
						jj_3_16();
						break;
					case 16:
						jj_3_17();
						break;
					case 17:
						jj_3_18();
						break;
					case 18:
						jj_3_19();
						break;
					case 19:
						jj_3_20();
						break;
					case 20:
						jj_3_21();
						break;
					case 21:
						jj_3_22();
						break;
					case 22:
						jj_3_23();
						break;
					case 23:
						jj_3_24();
						break;
					}
				}
				p = p.next;
			} while (p != null);
		}
		jj_rescan = false;
	}

	final private void jj_save(int index, int xla) {
		JJCalls p = jj_2_rtns[index];
		while (p.gen > jj_gen) {
			if (p.next == null) {
				p = p.next = new JJCalls();
				break;
			}
			p = p.next;
		}
		p.gen = jj_gen + xla - jj_la;
		p.first = token;
		p.arg = xla;
	}

	static final class JJCalls {
		int gen;
		Token first;
		int arg;
		JJCalls next;
	}

}
